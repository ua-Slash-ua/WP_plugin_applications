jQuery(document).ready(function ($) {
    // –ú–∞–ø–∞ —Ç–∏–ø—ñ–≤ –∑–∞—è–≤–∫–∏ —É —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    const typeLabels = {
        'nanny_match': '–ü—ñ–¥–±—ñ—Ä –Ω—è–Ω—ñ',
        'training_application': '–ù–∞–≤—á–∞–Ω–Ω—è',
        'nanny_signup': '–ó–∞—è–≤–∫–∞ –≤—ñ–¥ –Ω—è–Ω—ñ',
        'nanny_review': '–í—ñ–¥–≥—É–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å—ñ—é',
        // –¥–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
    };

    // –ú–∞–ø–∞ –¥–ª—è –≤–∏–≤–æ–¥—É –ø–æ–ª—ñ–≤ –∑–∞—è–≤–∫–∏ —É –º–æ–¥–∞–ª—Ü—ñ
    const fieldLabels = {
        id: 'ID –∑–∞—è–≤–∫–∏',
        type: '–¢–∏–ø –∑–∞—è–≤–∫–∏',
        is_viewed: '–°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≥–ª—è–¥—É',
        full_name: '–ü–æ–≤–Ω–µ —ñ–º‚Äô—è',
        phone: '–¢–µ–ª–µ—Ñ–æ–Ω',
        email: '–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞',
        location: '–õ–æ–∫–∞—Ü—ñ—è',
        format: '–§–æ—Ä–º–∞—Ç',
        vacancy: '–ù–∞–∑–≤–∞ –≤–∞–∫–∞–Ω—Å—ñ—ó', // ‚Üê –Ω–æ–≤–µ –ø–æ–ª–µ
        created_at: '–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è',
    };

    const emojiMap = {
        id: 'üÜî',
        type: 'üìã',
        is_viewed: 'üëÅÔ∏è',
        full_name: 'üë§',
        phone: 'üìû',
        email: 'üìß',
        location: 'üìç',
        format: 'üìù',
        vacancy: 'üíº', // ‚Üê —ñ–∫–æ–Ω–∫–∞ –¥–ª—è vacancy
        created_at: 'üìÖ',
    };


    function fetchApplications(filters = {}) {
        console.group('fetchApplications');
        console.log('–ó–∞–ø–∏—Ç –∑–∞—è–≤–æ–∫ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏:', filters);

        $.ajax({
            url: applicationsData.ajax_url,
            method: 'POST',
            data: {
                action: 'get_applications',
                nonce: applicationsData.nonce,
                filters: filters
            },
            success: function (response) {
                console.log('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:', response);

                if (response.success) {
                    renderApplications(response.data.items);
                    console.log(`–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${response.data.items.length} –∑ ${response.data.total}`);
                } else {
                    $('#applications-list').html('<p>–ü–æ–º–∏–ª–∫–∞: ' + (response.data || '–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å') + '</p>');
                    console.warn('–ü–æ–º–∏–ª–∫–∞ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
                }

                console.groupEnd();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $('#applications-list').html('<p>–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–∞—è–≤–æ–∫</p>');
                console.error('AJAX –ø–æ–º–∏–ª–∫–∞:', textStatus, errorThrown);
                console.groupEnd();
            }
        });
    }

    function renderApplications(applications) {
        console.group('renderApplications');
        console.log('–ú–∞—Å–∏–≤ –∑–∞—è–≤–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:', applications);

        const $list = $('#applications-list');
        $list.empty();

        if (!applications.length) {
            $list.append('<p>–ó–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>');
            console.log('–ó–∞—è–≤–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
            console.groupEnd();
            return;
        }

        applications.forEach(app => {
            const typeText = typeLabels[app.type] || app.type;
            const status = app.is_viewed == 1 ? '‚úÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∞' : 'üïí –ù–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∞';

            const row = $(`
                <div class="application-item" data-id="${app.id}">
                    <strong>#${app.id}</strong>
                    <div class="type">${typeText}</div>
                    <div class="name">${app.full_name}</div>
                    <button class="view-application button">–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏</button>
                    <div class="status">${status}</div>
                </div>
            `);

            $list.append(row);
        });

        console.groupEnd();
    }

    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª–∫–∏ –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞—è–≤–∫–∏
    $('#applications-list').on('click', '.view-application', function () {
        const id = $(this).closest('.application-item').data('id');
        console.log('–ó–∞–ø–∏—Ç –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏, ID:', id);

        $.ajax({
            url: applicationsData.ajax_url,
            method: 'POST',
            data: {
                action: 'get_application',
                nonce: applicationsData.nonce,
                id: id
            },
            success: function (response) {
                if (!response.success) {
                    alert('–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                    return;
                }

                const app = response.data;
                const $details = $('#application-details');
                $details.empty();

                for (const [key, value] of Object.entries(app)) {
                    let displayValue = value;

                    // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                    if (
                        displayValue === null ||
                        displayValue === undefined ||
                        (typeof displayValue === 'string' && displayValue.trim() === '') ||
                        (Array.isArray(displayValue) && displayValue.length === 0)
                    ) {
                        continue;
                    }

                    if (key === 'type') {
                        displayValue = typeLabels[value] || value;
                    }

                    if (key === 'is_viewed') {
                        displayValue = (value == 1 || value === '1') ? '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ' : '–ù–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ';
                    }

                    if (key === 'format' && typeof value === 'string') {
                        const arr = value.split(',').map(s => s.trim()).filter(Boolean);
                        displayValue = arr.join(', ');
                    }

                    if (Array.isArray(displayValue)) {
                        displayValue = displayValue.join(', ');
                    }

                    const label = fieldLabels[key] || key.replace(/_/g, ' ');
                    const emoji = emojiMap[key] || '‚ÑπÔ∏è';

                    $details.append(`
                    <p><span class="emoji">${emoji}</span> <strong>${label}:</strong> ${displayValue}</p>
                `);
                }

                // –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–æ–¥–∞–ª–∫—É
                $('#application-modal').data('id', app.id).removeClass('hidden');
                $('#mark-viewed').data('id', app.id);
            },
            error: function () {
                alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏.');
            }
        });
    });


    // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    $('#close-modal').on('click', function () {
        console.log('–ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑–∞—è–≤–∫–∏');
        $('#application-modal').addClass('hidden');
    });

    // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—É
    $('#mark-viewed').on('click', function () {
        const id = $(this).data('id');
        console.log('–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞—è–≤–∫—É —è–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—É, ID:', id);

        $.ajax({
            url: applicationsData.ajax_url,
            method: 'POST',
            data: {
                action: 'mark_application_viewed',
                nonce: applicationsData.nonce,
                id: id
            },
            success: function () {
                console.log('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ');
                $('#application-modal').addClass('hidden');
                fetchApplications(); // –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
            },
            error: function () {
                alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.');
            }
        });
    });

    // –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    $('#applications-filter-form').on('submit', function (e) {
        e.preventDefault();
        const filters = $(this).serializeArray().reduce((obj, item) => {
            if (item.value) obj[item.name] = item.value;
            return obj;
        }, {});
        console.log('–§—ñ–ª—å—Ç—Ä–∏ —Ñ–æ—Ä–º–∏ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ:', filters);
        fetchApplications(filters);
    });

    // –°–∫–∏–¥–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
    $('#reset-filters').on('click', function () {
        $('#applications-filter-form')[0].reset();
        console.log('–§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ');
        fetchApplications({});
    });

    // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫
    console.log('–ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫');
    fetchApplications({});
});
